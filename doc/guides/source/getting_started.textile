h2. Getting Started

The purpose of this guide is help new developers get up and running with BrowserCMS. It covers how to:

* Install the BrowserCMS gem
* Create a demo project to explore BrowserCMS
* Create a blank project for building a website from scratch

endprologue.

h3. Installing BrowserCMS

BrowserCMS is packaged as a gem which can be included in any Rails project. The gem contains the code for the cms application itself, as well as public assets, including stylesheets, images and javascript. These assets will be copied from the gem into your project as part of the install process.

The gem is hosted at Gemcutter, so you can install it by doing:

<shell>
$ sudo gem install browsercms
</shell>

h4. Things you need first

Before you can create a project using BrowserCMS, you will need to have the following installed.

# *Rails 2.3* (or later) - We make use of some of the newer features from Rails like application generator templates.
# *A Database* - Either Mysql or the Sqlite gems should be installed.

h3. Trying out BrowserCMS

This section will cover how to create a demo project using BrowserCMS, so you can play around with it. It will create a sample project, with some pages and content to play around with.

h4. Your first project
BrowserCMS

<shell>
$ browsercms project_name -m demo
$ cd project_name
$ script/server
</shell>

By default, Rails assumes that if you do not specify a -d flag, that you want to use SQLite as your project's database. You need to have the sqlite3-ruby gem installed for this to work.

h4. Using your Site

Open your browser to "http://localhost:3000/cms":http://localhost:3000/cms to log into the admin for the CMS. Enter the default username/password (in development mode) is username=cmsadmin, password=cmsadmin. You should be now be logged in, viewing the home page of the site. You can now edit or add new content via the admin interface.

To learn more about the types of things you can do with BrowserCMS, see the "User's Guide":user_guide.html.

h3. Starting a 'Real' project

Demo sites are fine for learning the ropes, but when its time to start working on a 'real' project, you don't want a lot
of dummy data that needs to be cleaned out. To start a typical, 'blank' project, you can run the following command. Here
we will specify the -d flag, which will use MySQL as the database.

Run the following:

<shell>
$ browsercms project_name -d mysql
$ cd project_name
$ script/server
</shell>

You need to have the mysql gem installed for this to work. This is going to create the development and testing copies of
the database, migrate the db, populate it with the bare minimum content it needs, and copy all of the necessary files
from the gem into the rails project. Open your browser to "http://localhost:3000/cms":http://localhost:3000/cms to log in,
using cmsadmin/cmsadmin as the username/password.

h3. The really short version

There is a shorter version of the commandline script, which works identically to the longer form detailed above.

<shell>
$ bcms project_name -d mysql
</shell>

No difference in functionality, just less to type.

h3. Getting Command line Help

You can get assistance from the commandline tool by running +browsercms+ with no arguments, like so:

<shell>
$ browsercms
</shell>

This will show common usages, as well as all the help options available. The +browsercms+ command piggybacks on top of the
+rails+ command, so many of the options available are the same as +rails+, including +-f+ or +--force+.

h3. Deploying to production

Once you get ready to start deploying your application into production environments, be sure to review the "Deployment Guide":deployment_guide.html.
There are several 'gotchas' to be aware of that may differ from deploying other Rails applications. 
