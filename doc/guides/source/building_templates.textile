h2. BrowserCMS Designer Guide

This guide covers how to set up templates for BrowserCMS. After reading this guide, you should understand how to:

* How to create page templates
* How to take advantage of dynamic menus
* How to reuse common bits of html with page partials
* How to use helpers to add dynamic content to templates and partials
* How to use the CMS-specific form builder extensions

endprologue.

h3. Introduction

One of the primary goals of implementing a content management system is to separate Design from Content. This allows designers to provide an attractive design that users can easily apply. A CMS can be thought of as a 'Web Page' factory, where designers can create the template (i.e. the molds) that users without design knowledge can use to stamp out new pages.

BrowserCMS supports this concept by the use of page templates. Each page within the site has a single page template that governs it's layout. Templates are essentially html pages with the editable areas specified. A template can be anything from a basic two column subpage to homepage design with a half dozen separate editable areas. BrowserCMS supports an 'in-context' page editor, that allows users to see which areas of the page are editable.

h4. Typical Design Process

When you are developing a site with BrowserCMS, there are a lot of ways to organize and design the site. One of the goals of the project is to support highly graphical designs that pass through multiple team members hands. As such, the template creation process is optimized to mimic the steps that would work for any web development project, without constraining the design to fit the tool.

Here is an example of a web design process to create templates for BrowserCMS.

# A designer creates a Photoshop (PSD or JPG) which represents the desire final look of a page.
# A developer converts the PSD into a static HTML file which implements that design.
# The developer can take this html file, add it to the CMS as a page template just by renaming it from .htm to .html.erb
# The developer can add a few helper methods to the template replacing the 'static' text to make it editable through the CMS interface.

There are few additional considerations we will get into, but this basic process allows developers to work in a medium they are well trained in (HTML production) with minimal training on BrowserCMS itself. For the purposes of this document, assume there are three separate and distinct roles around creating a CMS site.

# Designer - A person in charge of defining the overall look and feel of the pages within a site. Produces a PSD.
# Developer - A person in charge of converting the ideal look (PSD) into an HTML page and ultimately a CMS template.
# Programmer - A person in charge of coding content types (blocks) and dynamic behavior (portlets).

h4. Design Considerations

There are some considerations that designers/developers should take into account if they want to get the maximum benefit from working w/ BrowserCMS. Here's a quick list:

1. BrowserCMS can render menus (one or more levels deep) automatically from the site architecture. Developers should understand how menu code is generated when styling them, which happens in a "CSS Zen Garden":http://www.csszengarden.com style.
2. The Site Map is how pages and sections are organized. Developers should understand how this will affect auto-generated menus.
3. In addition to static content, the look of some areas of pages will be rendered dynamically by portlets and blocks. Developers may need to work with programmers to determine whether view code will be dynamically generated via portlets or statically placed by users.

h3. Creating a Page Template

There are two ways to create a template, as a file within the project (much like how Rails layouts work) or as content in the database. Let's start with creating a file based template. Assuming we are starting from a new _blank_ BrowserCMS project, lets create a template that will represent our subpages. Run the following from the command line:

<shell>
$ script/generate template subpage	
</shell>

This generates a file called +app/views/layouts/templates/subpage.html.erb+. For experience Rails developers, you will note that within the traditional +layouts+ directory we have create a subdirectory called +templates+. All files placed within this directory are available as page templates with the UI. Open up this template file and it should look like this:

<erb>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
    <title><%= page_title %></title>
    <%= yield :html_head %>
  </head>
  <body style="margin: 0; padding: 0; text-align: center;">
    <%= cms_toolbar %>
    <div id="wrapper" style="width: 700px; margin: 0 auto; text-align: left; padding: 30px">
      Breadcrumbs: <%= render_breadcrumbs %>
      Main Menu: <%= render_menu %>
      <h1><%= page_title %></h1>
      <%= container :main %>
    </div>
  </body>
</html>	
</erb>

This is a bare bones XHTML template with one editable area (i.e. One Column). It has no CSS stylesheets or javascript. It's about the simplest possible template we can have to create a renderable page in BrowserCMS. 

h4. Understanding Containers

There are a bits of ruby code (helpers) that our basic template has, but let's focus on the +container+ helper. Open up the CMS UI and go to +/cms/sitemap+ and Add a New Page. Name it 'About Us', and select 'Subpage' from the 'Template' dropdown to use this new template. Click Save. You should see a mostly white page. Click the 'Turn On' button in the upper right to enable the editor, and you should see a single grey box. This box is the +container+ we defined in our template. Users can insert new or existing content into pages, and the containers determine where they go. Add some Text content to the page in this container.

NOTE. Container are placeholders for content. When you have two pages that use the same template, they do not share the content. Putting some Text into the +:main+ container of Page A doesn't mean it will also appear on Page B just because that page also has a +:main+ container.

h4. Adding A Sidebar Container

Let's alter our template to add a second column (i.e. Sidebar). Modify the +subpage.html+ to look like the following:

<erb>
<head>
  <title><%= page_title %> | Our Fancy Site</title>
  <style>
      body, html { margin: 0; padding: 0; text-align: center; }
      #wrapper { width: 700px; margin: 0 auto; text-align: left; padding: 30px }
      #main { float: left; width: 500px; }
      #sidebar { float: right; padding: 0 30px 0 0; width: 150px;}
  </style>
  <%= yield :html_head %>
</head>
<body>
<%= cms_toolbar %>
<div id="wrapper">
  <div id="header">
    Breadcrumbs: <%= render_breadcrumbs %>
    Main Menu: <%= render_menu %>
    <h1><%= page_title %></h1>
  </div>
  <div id="main"><%= container :main %></div>
  <div id="sidebar"><%= container :sidebar %></div>
</div>
</body>
</erb>

We have added several +div+ elements to the template to clearly define a header, main and sidebar areas of our page. We have also cleaned up the CSS placed in the +head+ element of the page. This CSS could also be moved to an external stylesheet as well. Now refresh the page and you should see an additional column on the right with a new +:sidebar+ container being rendered. The content placed in the +:main+ container will still there, though moved around based on the CSS rules of the template.

Having seen the sample templates, it should be possible to construct HTML templates using typical HTML and CSS, place containers in them where content should appear and get a reasonable looking set of templates.

h3. Tags Quick Reference

This section covers a reference for all the tags (aka Helper Methods) that can be used in Page Templates to render various elements. Here is a quick list of the available tags, their purpose and whether they are required or not.

._ Name |_. Purpose | Required? |
| +container+ | A named area that allows users to add/edit content | Yes |
| +cms_toolbar+ | Renders the CMS toolbar controller required for editing and navigation. Should be very first element in +body+ | Yes |
| +yield :html_head | This allows the CMS to insert javascript and other information into the page. Should be last element in +head+ | Yes | 
| +page_title+ | Inserts the 'Name' of the page (or 'Title' if it exists) | No |
| +render_breadcrumbs+ | Generates breadcrumbs based on the current page and its location in the sitemap | No |
| +render_menu+ | Generates a menu based on the current page and its location in the sitemap | No |
| +render_portlet+ | Renders a specific portlet by name | No |
| +render_connectable+ | Renders a specific content block | No |

In addition, since Page Templates are Rails layouts, you can make use of any of the Asset Tags":http://guides.rubyonrails.org/layouts_and_rendering.html#structuring-layouts like +stylesheet_link_tag+ or +image_tag+.

h4. Required Tags

While most of the tags are optional, there are several tags which must be included or page template just won't work correctly. Here's the minimum necessary tags required.

1. +yield :html_head+ - Leaving this out will cause problems with in page editing.
2. +cms_toolbar+ - Leaving this out will provide editing and navigation to other CMS pages.
3. +container+ - Having at least one (typically called +:main+) is required to allow content to be added to pages.

h3. Menus and Breadcrumbs

BrowserCMS provides an API to allow menus and breadcrumbs to be dynamically generated based on the sitemap. The advantage of this is menus can automatically include new pages as they are added to the site, and can detect which section of the 

<ruby>
render_menu
</ruby>

