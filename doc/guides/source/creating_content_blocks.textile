h2. Creating Content Blocks

This guide covers how developers can create content blocks. It covers the following concepts:

* Generating a new Block
* Attributes
* Migrations
* Grouping related Content Blocks

endprologue.

h3. Generating a new Content Block

New blocks can be creating using their own generator. For this guide, we will start by creating a Product block. This
will represent a single product that users can browse and purchase for. CMS users will be able create new products via a
generated user interface. Products can be place on pages as content, or fetched by Portlets based on specific criteria.

Run the following command:

<shell>
$ script/generate content_block Product name:string price:integer description:html
</shell>

This generates the Content Block with several attributes. We will cover a list of available attributes later.

h4. Generated files

The generator creates a number of files, as well as modify the routes.rb file to add the new routes for modifying Products.

|_. File |_. Purpose |
| app/models/product.rb | The Product content block (i.e. the model) |
| db/migrate/20100127012201_create_products.rb | Migration to create the product tables (The timestamps will vary) |
| app/controllers/cms/products_controller.rb | Controller to modify products |
| app/views/cms/products/_form.html.erb | Partial for the form to edit Products |
| app/views/cms/products/render.html.erb | View for rendering a Product |
| test/unit/models/product_test.rb | Unit test for the Product model |
| test/functional/cms/products_controller_test.rb | Functional test for the Product Controller |
| config/routes.rb | Edited to add routing information for Products |

h4. Migrating the database

After generating the content block, you will need to run the migration to add the product tables. Run the following at your terminal:

<shell>
$ rake db:migrate
</shell>

This will create several tables and registers the new Product in the UI. You should not need to restart your server if
its already running to use the admin interface.

h4. Viewing the User Interface

After creating the model, you can review the basic user interface that has been generated to add and edit products. In
the CMS UI, you can go directly to +/cms/products+. This is the index page for products, which will list all instances of
your Product models in the database. As we have just created this block, there should be none in the database.

Click on the _Add New Content_ button, which will bring up the form to add a new instance of a Product. This form will have
three form fields for the three attributes we specified in our generator, name, price and description. The form fields available
on this page are determined by what is in the +app/views/cms/products/_form.html.erb, which will cover later.

Fill in some data for each of these three fields and click the _Save and Publish_ button. You will now be looking at a
view of the product you just added. Each product has a default way of showing it's data to the world, which is defined in
the +app/views/cms/products/render.html.erb+ file. When a block is first generated, it will just list it's attributes.
However, as you will see later, you can edit that file to change how it's displayed. On this page (+/cms/products/1+)
you are seeing a product by itself, but since any block can be added to a page, the +render.html.erb+ determines how it
will look.

h3. Available Attributes

Blocks are really just ActiveRecord models, and they will support all of the same attribute or column types that Rails model
or migrations do. Each attribute will be mapped to a column in the +products+ table and will have a form field to allow
users to edit it. Here is a list of the commonly used attributes. Not all attributes can be specified via the generator,
though they can be added to blocks later. These attribute

|_. Generator |_. Migration |_. Field |_. Description |
| string | string | cms_text_field | A single line text field allowing for basic text entry. |
| integer | integer | cms_text_field | See +string+ |
| decimal | decimal | cms_text_field | See +string+ |
| boolean | boolean | cms_check_box | A single check box |
| date | date | cms_date_picker | A javascript popup date picker that lets you select date from a mini calendar |
| datetime | datetime | cms_datetime_select | A widget to choose month, day, year and time using several select boxes |
| category | belongs_to :category | cms_drop_down | A styled select to choose any Category associated with the block |
| html | text (64.kilobytes + 1) | cms_text_editor | A WYSIWYG Html Editor |
| attachment | belongs_to :attachment | cms_file_field | A File Browse button to upload files into the repository. |
| NA | NA | cms_tag_list | A text area that can be used to associate blocks with Tags (many to many) |
| NA | integer | cms_drop_down | A styled select to handle creating belongs_to relationship with other blocks |

*Table Key*
* Generator - What is specified the generator (i.e. name:string)
* Migration - The migration column type that Rails will use to generate the table.
* Field - The name of the default Form Field method which is generated to allows users to edit that attribute.
* Description - The basic purpose of the form field.

h4. Examples

Here are some examples of potential usages for generating blocks, using the generator.

<shell>
$ script/generate content_block Meeting name:string active:boolean start_date:date end_time:datetime
$ script/generate content_block photo attachment:attachment on_shelf:category
</shell>

h4. Gotchas

* Specifying the +name+ attribute is optional. It will be included automatically if you don't specify it.
* Any block can only ever have one attribute of type 'Attachment'. The field name must be 'Attachment', though you can
 change the label shown on the form field.

h4. Default Fields

This list of attributes isn't comprehensive though, and any migration attribute supported by Rails may work. The content_block generator
will just pass the attribute to the migration and use a cms_text_field Field to edit the component.


h4. Validations

Since content blocks are just still ActiveRecord objects, you can use any Rails Validations to enforce the data validity.
Let's add one to our Product. Edit the app/models/product.rb file. It should look like this:

<ruby>
class Product < ActiveRecord::Base
  acts_as_content_block
end
</ruby>

Let's assume we want to require that users will specify a price when they add a new product. Add the following to the block.

<ruby>
class Product < ActiveRecord::Base
   validates_presence_of :price
end
</ruby>

Then open up /cms/products in your browser and click _Add New Content_. Leave the price empty and try to save the block.
The CMS will check the product has a price, and will display an error message if it's not included. It will also highlight
the field to indicate where the error is.

See the "ActiveRecord Validation":http://guides.rubyonrails.org/activerecord_validations_callbacks.html#validations-overview Guide
for a more detailed list of supported validations.

h4. Customizing the Form

The form created for us is good enough, but suppose we want change it up a bit. For example, I would like to add  some
instructions to our price field to indicated that it's a required integer (whole dollars only) and put it last in the order.
We can do this by editing the +app/views/cms/_form.html.erb+ partial.

Here's what our Form looks like:

<erb>
<%= f.cms_text_field :name %>
<%= f.cms_text_field :price %>
<%= f.cms_text_editor :description %>
</erb>

Switching the order is easy. Just move the :price line after the :description line.

The controller created at <tt>app/controllers/cms/products_controller.rb</tt> is equally empty:

<ruby>
class Cms::ProductsController < Cms::ContentBlockController
end
</ruby>

This controller is the controller used in the actual CMS interface.  If you want to create a controller to use in the front end of your application, create a products controller that is not in the CMS namespace, so as not to conflict the CMS functionality.  You will most likely not need to customize the CMS controller at all.



The render template at <tt>app/views/cms/products/render.html.erb</tt> is the template that will be used to render the HTML when this product is placed directly on a page.  It is also what is shown when you view a product within the content library of the CMS.

As you will see in the next section, custom content blocks are often not placed directly on a page, instead the data of a product is displayed through a portlet.  For this reason, a more informational display, similar to what is automatically generated by the generator, is what the render template often contains.  Depending on what your content block is, you may want to place the content block directly on a page, in which case you would most likely customize the render template.

h4. Attribute Types

This section covers some of the different attribute types that Content Blocks can have. Each attribute represents a
persistent column in the database, will appear as an editable control on the _form.html.erb, and may also need to need to be configured
on the content_block itself.

List of Content Types
* Text Fields
* Text Areas
* Drop Down (Select)
* Text Editor (WYWIWYG)
* Attachment (File Upload)
* Tag List (Allow
* Date Picker

h5. Drop Down / Selects

This is similar to the traditional 'select' helper, it renders a stylized select control which allows users to choose one item from a list.

h6. cms_drop_down

In _form.html.erb:
<erb>
<%= f.cms_drop_down :category_id, Category.all(:order => "name").map{|c| [c.name, c.id]},
                    :prompt => "Select a Category", :label => "Category",
                    :instructions=>"Determines which category is used on the homepage." %>
</erb>

In product.rb:
<ruby>
class Product < ActiveRecord::Base
    belongs_to :category
end
</ruby>

h5. Attachments

Each content block can have a single file attachment, which will allow users to upload files into the content repository. After uploading, the file will be
stored in a section within the CMS. Since sections determine permissions, this will allow you to control which users can access the file itself. Attached files
will have their own versioning history, which will keep track of changes.

h6. cms_file_field

This helper will create a stylized file upload file. An uploaded file will be associated with the content_block to which it is attached.

In _form.html.erb (View)
<erb>
<%= f.cms_file_field :attachment_file, :label => "File" %>
</erb>

In product.rb (Model)
<ruby>
class Product < ActiveRecord::Base
   acts_as_content_block :belongs_to_attachment => true
end
</ruby>

In create_products.rb (Migration)
<ruby>
create_content_table :products do |t|
    t.belongs_to :attachment
    t.integer :attachment_version
end
</ruby>